/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 SmartDrone_A.glb
*/

import { useLayoutEffect, useRef } from "react";
import { useSnapshot } from "valtio";

import { modelColorState } from "@/components/molecules/Picker";
import usePlayer from "@/hooks/usePlayer";
import { RobotColor } from "@/types";
import { useGLTF, useTexture } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

export default function SmartDrone(props) {
  const ref = useRef();
  const snap = useSnapshot(modelColorState);
  const player = usePlayer();

  const bodyColor = (() => {
    if (player.color) return player.color;
    else {
      return snap.items.SmartDrone_Body_Material ?? RobotColor.WHITE;
    }
  })();

  const { nodes, materials } = useGLTF(`/assets/models/SmartDrone/Glb/SmartDrone.glb`);
  const colorMap = useTexture(`/assets/models/SmartDrone/Texture/SmartDrone_B_${bodyColor}.png`);

  useFrame((state) => {
    if (!ref.current) return;

    const t = state.clock.getElapsedTime();
    ref.current.rotation.set(
      Math.cos(t / 4) / 8,
      Math.sin(t / 4) / 8,
      -0.2 - (1 + Math.sin(t / 1.5)) / 20,
    );
    ref.current.position.y = (1 + Math.sin(t / 1.5)) / 10;
  });

  useLayoutEffect(() => {
    Object.assign(materials?.SmartDrone_Body_Material, {
      map: colorMap,
    });
  }, [materials, colorMap]);

  return (
    <group ref={ref} {...props} dispose={null}>
      <group ref={ref} position={[0.024, 0, 0.734]} scale={0.025}>
        <mesh geometry={nodes.Mesh.geometry} material={materials.SmartDrone_Body_Material} />
        <mesh geometry={nodes.Mesh_1.geometry} material={materials.SmartDrone_Face_Material} />
      </group>
    </group>
  );
}
